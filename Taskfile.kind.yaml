version: '3'

set: [pipefail,e]

output: prefixed

vars:
  KC_OPERATOR_TAG: "25.0.1"
  MINIKUBE_IP: 
    sh: ip route get 8.8.8.8 | head -1 | cut -d\  -f 7 | sed 's|\.|-|g'
  SIGNING_IP: 
    sh: ip route get 8.8.8.8 | head -1 | cut -d\  -f 7 
  NAMESPACE: "keycloak-namespace"

tasks:

  # KIND
  prepare-kind:
    desc: "Prepare KinD"
    requires:
      vars:
        - MINIKUBE_IP
    cmds:
      - kind create cluster --config kind/cluster.yaml
      - MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < kind/ingress.yaml |kubectl apply -f -

  # KEYCLOAK
  keycloak-operator-deploy:
    # https://www.keycloak.org/operator/installation
    desc: "Install Keycloak operator to the current cluster"
    requires:
      vars:
        - NAMESPACE
    cmds:
      - kubectl create namespace "{{.NAMESPACE}}" || true
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/keycloaks.k8s.keycloak.org-v1.yml
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/keycloakrealmimports.k8s.keycloak.org-v1.yml
      - kubectl -n {{.NAMESPACE}} delete deployment/keycloak-operator || true
      - kubectl -n {{.NAMESPACE}} apply -f https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/refs/tags/{{.KC_OPERATOR_TAG}}/kubernetes/kubernetes.yml
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Available --timeout=1200s deployment/keycloak-operator
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Progressing --timeout=300s deployment/keycloak-operator

  # KEYCLOAK
  keycloak-postgres-deploy:
    # https://www.keycloak.org/operator/basic-deployment
    desc: "Deploy Postgres database that will be used for Keycloak"
    requires:
      vars:
        - NAMESPACE
    cmds:
      - kubectl -n {{.NAMESPACE}} apply -f keycloak/k8s-resources/postgres.yaml
      - MINIKUBE_IP={{.MINIKUBE_IP}} kubectl -n {{.NAMESPACE}} rollout status --watch --timeout=600s statefulset/postgresql-db

  # KEYCLOAK
  create-certificates:
    # https://www.keycloak.org/operator/basic-deployment
    internal: true
    dir: .task
    requires:
      vars:
        - NAME
    cmds:
      - openssl req -subj '/CN={{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/O=Test Keycloak./C=US' -addext "subjectAltName = IP:{{.SIGNING_IP}}, DNS:{{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io" -newkey rsa:2048 -nodes -keyout {{.NAME}}_key.pem -x509 -days 365 -out {{.NAME}}_certificate.pem
      - openssl x509 -outform der -in {{.NAME}}_certificate.pem -out {{.NAME}}_certificate.der
      - (kubectl -n {{.NAMESPACE}} delete secret {{.NAME}}-tls-secret || true) && kubectl -n {{.NAMESPACE}} create secret tls {{.NAME}}-tls-secret --cert {{.NAME}}_certificate.pem --key {{.NAME}}_key.pem
      - rm i-trust-{{.NAME}}.jks || true
      - keytool -import -alias {{.NAME}}.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io -keystore i-trust-{{.NAME}}.jks -file {{.NAME}}_certificate.der -storepass password -noprompt
      - (kubectl -n {{.NAMESPACE}} delete secret i-trust-{{.NAME}}-secret || true) && kubectl -n {{.NAMESPACE}} create secret generic i-trust-{{.NAME}}-secret --from-file=i-trust-{{.NAME}}.jks
    status:
      - test -f {{.NAME}}_key.pem
      - test -f {{.NAME}}_certificate.pem
      - test -f {{.NAME}}_certificate.der
      - kubectl -n {{.NAMESPACE}} get secret/{{.NAME}}-tls-secret

  reset-kind:
    cmds:
      - kind delete cluster || true


  # KEYCLOAK
  keycloak-deploy-all:
    # https://www.keycloak.org/operator/basic-deployment
    desc: "Deploy whole Keycloak"
    deps:
      - keycloak-operator-deploy
      - keycloak-postgres-deploy
    cmds:
      - task: create-certificates
        vars:
          NAME: keycloak
      - kubectl -n {{.NAMESPACE}} create secret generic keycloak-db-secret --from-literal=username=testuser --from-literal=password=testpassword || true
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < keycloak/k8s-resources/keycloak.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      # wait for Keycloak Operator to pick up changes and wait for Keycloak deployment
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Ready --timeout=1200s keycloaks.k8s.keycloak.org/keycloak-riviera-dev
      - kubectl -n {{.NAMESPACE}} wait --for=condition=RollingUpdate=False --timeout=300s keycloak/keycloak-riviera-dev
      # Add TLS handling to the Ingress
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst < keycloak/k8s-resources/keycloak-ingress-tls-patch.yaml > .task/ingress-patch.yaml
      - kubectl -n {{.NAMESPACE}} patch ingress keycloak-riviera-dev-ingress --patch-file .task/ingress-patch.yaml
      # Import the realm, wait for the import to finish. Once this is done, the Keycloak operator triggers a rolling restart of the Keycloak deployment to clear caches.
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} envsubst '${NAMESPACE},${MINIKUBE_IP}' < keycloak/k8s-resources/keycloak-realm-import.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Done --timeout=300s keycloakrealmimports.k8s.keycloak.org/riviera-dev-realm
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Started=False --timeout=300s keycloakrealmimports.k8s.keycloak.org/riviera-dev-realm
      - kubectl -n {{.NAMESPACE}} wait --for=condition=HasErrors=False --timeout=300s keycloakrealmimports.k8s.keycloak.org/riviera-dev-realm
      # Although this will be a rolling restart, this is still disruptive as we only have a single Pod in our setup here. It wouldn't be disruptive if we would have at least two Pods.
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Ready --timeout=300s keycloaks.k8s.keycloak.org/keycloak-riviera-dev
      - kubectl -n {{.NAMESPACE}} wait --for=condition=RollingUpdate=False --timeout=300s keycloak/keycloak-riviera-dev
      - |
        echo "Access Keycloak on https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io"
        echo "Username:" $(kubectl -n {{.NAMESPACE}} get secrets keycloak-riviera-dev-initial-admin -o=jsonpath='{.data.username}' | base64 -d)
        echo "Password:" $(kubectl -n {{.NAMESPACE}} get secrets keycloak-riviera-dev-initial-admin -o=jsonpath='{.data.password}' | base64 -d)

  quarkus-build-docker:
    desc: "Build Quarkus app sources"
    dir: quarkus-oidc-extension
    requires:
      vars:
        - NAMESPACE
        - MINIKUBE_IP
    cmds:
      - docker build -t quarkus-oidc-extension:1.0.0-SNAPSHOT -f Dockerfile.jvm --build-arg MINIKUBE_IP={{.MINIKUBE_IP}} --build-arg NAMESPACE={{.NAMESPACE}} .
      - kind load docker-image quarkus-oidc-extension:1.0.0-SNAPSHOT

  quarkus-build-k8s:
    desc: "Extracting k8s files"
    dir: quarkus-oidc-extension
    cmds:
      - docker create --name BUILDER_TMP quarkus-oidc-extension:1.0.0-SNAPSHOT
      - docker cp BUILDER_TMP:/deployments/kubernetes.yml kubernetes.yml || (docker rm -v BUILDER_TMP && false)
      - docker rm -v BUILDER_TMP || true

  quarkus-deploy-all:
    desc: "Prepare and deploy Quarkus app"
    cmds:
      - task: quarkus-build-docker
      - task: quarkus-build-k8s
      - sleep 2
      - kubectl -n {{.NAMESPACE}} apply -f quarkus-oidc-extension/kubernetes.yml 
      - sleep 2 # Wait for the deployment controller to update the status
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Available --timeout=300s deployments.apps/quarkus-oidc-extension
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Progressing --timeout=300s deployments.apps/quarkus-oidc-extension
      - sleep 2 # Wait for the ingress controller to update the ingress configuration
      - |
        echo $(kubectl -n keycloak-namespace get ingress/keycloak-riviera-dev-ingress -o jsonpath='{.spec.rules[0].host}')
        curl -f -v --insecure -X POST https://$(kubectl -n keycloak-namespace get ingress/keycloak-riviera-dev-ingress -o jsonpath='{.spec.rules[0].host}')/realms/riviera-dev-realm/protocol/openid-connect/token \
          -u 'quarkus-oidc-extension:1LZ65XcapsfnwEOLsByUW7KKv05mGsZF' \
          -H "content-type: application/x-www-form-urlencoded" \
          -d 'username=user&password=user&grant_type=password'
        USER_TOKEN=$(curl -f -s --insecure -X POST https://$(kubectl -n keycloak-namespace get ingress/keycloak-riviera-dev-ingress -o jsonpath='{.spec.rules[0].host}')/realms/riviera-dev-realm/protocol/openid-connect/token \
          -u 'quarkus-oidc-extension:1LZ65XcapsfnwEOLsByUW7KKv05mGsZF' \
          -H "content-type: application/x-www-form-urlencoded" \
          -d 'username=user&password=user&grant_type=password' | jq --raw-output '.access_token')
        curl -f -s -v -i "http://$(kubectl -n keycloak-namespace get ingress/quarkus-oidc-extension -o jsonpath='{.spec.rules[0].host}')/user" --header "Authorization: Bearer $USER_TOKEN"
      - |
        echo "Access the Quarkus app on http://quarkus-oidc-extension.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io"

  javascript-react-deploy:
    desc: "Deploy React frontend application that communicates with Quarkus and SpringBoot apps"
    dir: javascript-react
    cmds:
      - docker build -t javascript-react:1.0.0-SNAPSHOT .
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} CHECKSUM=$(find src -type f -exec sha256sum {} \; | sha256sum | awk '{ print $1 }') envsubst < k8s-resources/javascript-react.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Available --timeout=300s deployments.apps/javascript-react
      - |
        echo "Access React application on http://$(kubectl -n keycloak-namespace get ingress/javascript-react -o jsonpath='{.spec.rules[0].host}')"

  spring-security-deploy:
    desc: "Deploy SpringBoot application that uses Keycloak for authentication"
    dir: spring-security
    cmds:
      - rm -rf target
      - mkdir -p target
      - docker build -t spring-security:1.0.0-SNAPSHOT -f Dockerfile --build-arg MINIKUBE_IP={{.MINIKUBE_IP}} --build-arg NAMESPACE={{.NAMESPACE}} .
      - docker create --name BUILDER_TMP spring-security:1.0.0-SNAPSHOT
      - docker cp BUILDER_TMP:/deployments/spring-security-1.0.0-SNAPSHOT.jar target/ || (docker rm -v BUILDER_TMP && false)
      - docker rm -v BUILDER_TMP || true
      - kind load docker-image spring-security:1.0.0-SNAPSHOT
      - NAMESPACE={{.NAMESPACE}} MINIKUBE_IP={{.MINIKUBE_IP}} CHECKSUM=$(sha256sum target/spring-security-1.0.0-SNAPSHOT.jar | awk '{ print $1 }') envsubst < k8s-resources/spring-security.yaml | kubectl -n {{.NAMESPACE}} apply -f -
      - kubectl -n {{.NAMESPACE}} wait --for=condition=Available --timeout=300s deployments.apps/spring-security
      - |
        echo "Access the Spring app on http://spring-security.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io"

  grafana-deploy:
    desc: "Deploy Prometheus and Grafana for monitoring"
    cmds:
      - kubectl create namespace monitoring || true
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - |
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --version 39.11.0 -f grafana/monitoring.yaml \
        --set grafana."grafana\.ini".server.root_url=https://grafana.{{.MINIKUBE_IP}}.nip.io \
        --set grafana."grafana\.ini"."auth\.generic_oauth".auth_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/auth \
        --set grafana."grafana\.ini"."auth\.generic_oauth".token_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/token \
        --set grafana."grafana\.ini"."auth\.generic_oauth".api_url=https://keycloak.{{.NAMESPACE}}.{{.MINIKUBE_IP}}.nip.io/realms/riviera-dev-realm/protocol/openid-connect/userinfo \
        --set prometheus.prometheusSpec.retention=168h
      - helm upgrade --install monitoring --set namespace={{.NAMESPACE}} --set hostname={{.MINIKUBE_IP}}.nip.io grafana/monitoring
      - |
        echo "Access Grafana on https://$(kubectl -n monitoring get ingress/grafana-ingress -o jsonpath='{.spec.rules[0].host}')"




    
    
